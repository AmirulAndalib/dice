// Code generated from DSQL.g4 by ANTLR 4.13.2. DO NOT EDIT.

package parser

import (
	"fmt"
	"github.com/antlr4-go/antlr/v4"
	"sync"
	"unicode"
)

// Suppress unused import error
var _ = fmt.Printf
var _ = sync.Once{}
var _ = unicode.IsLetter

type DSQLLexer struct {
	*antlr.BaseLexer
	channelNames []string
	modeNames    []string
	// TODO: EOF string
}

var DSQLLexerLexerStaticData struct {
	once                   sync.Once
	serializedATN          []int32
	ChannelNames           []string
	ModeNames              []string
	LiteralNames           []string
	SymbolicNames          []string
	RuleNames              []string
	PredictionContextCache *antlr.PredictionContextCache
	atn                    *antlr.ATN
	decisionToDFA          []*antlr.DFA
}

func dsqllexerLexerInit() {
	staticData := &DSQLLexerLexerStaticData
	staticData.ChannelNames = []string{
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN",
	}
	staticData.ModeNames = []string{
		"DEFAULT_MODE",
	}
	staticData.LiteralNames = []string{
		"", "';'", "','", "'('", "')'", "'.'", "'-'", "'+'", "'||'", "'/'",
		"'%'", "'<<'", "'>>'", "'&'", "'|'", "'<'", "'<='", "'>'", "'>='", "'='",
		"'=='", "'!='", "'<>'", "", "", "", "", "", "", "", "", "", "", "",
		"", "", "", "", "'*'", "'$key'", "'$value'",
	}
	staticData.SymbolicNames = []string{
		"", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "",
		"", "", "", "", "", "", "K_ALL", "K_AND", "K_ASC", "K_DESC", "K_DISTINCT",
		"K_FALSE", "K_FROM", "K_LIMIT", "K_NULL", "K_OR", "K_ORDER", "K_SELECT",
		"K_TRUE", "K_WHERE", "K_BY", "STAR", "KEY", "VALUE", "NUMERIC_LITERAL",
		"STRING_LITERAL", "BLOB_LITERAL", "SINGLE_LINE_COMMENT", "MULTILINE_COMMENT",
		"SPACES", "IDENTIFIER", "SIMPLE_IDENTIFIER", "UNEXPECTED_CHAR",
	}
	staticData.RuleNames = []string{
		"T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", "T__7", "T__8",
		"T__9", "T__10", "T__11", "T__12", "T__13", "T__14", "T__15", "T__16",
		"T__17", "T__18", "T__19", "T__20", "T__21", "K_ALL", "K_AND", "K_ASC",
		"K_DESC", "K_DISTINCT", "K_FALSE", "K_FROM", "K_LIMIT", "K_NULL", "K_OR",
		"K_ORDER", "K_SELECT", "K_TRUE", "K_WHERE", "K_BY", "STAR", "KEY", "VALUE",
		"NUMERIC_LITERAL", "STRING_LITERAL", "BLOB_LITERAL", "SINGLE_LINE_COMMENT",
		"MULTILINE_COMMENT", "SPACES", "DIGIT", "IDENTIFIER", "SIMPLE_IDENTIFIER",
		"IDENTIFIER_CHAR", "A", "B", "C", "D", "E", "F", "G", "H", "I", "J",
		"K", "L", "M", "N", "O", "P", "Q", "R", "S", "T", "U", "V", "W", "X",
		"Y", "Z", "UNEXPECTED_CHAR",
	}
	staticData.PredictionContextCache = antlr.NewPredictionContextCache()
	staticData.serializedATN = []int32{
		4, 0, 49, 461, 6, -1, 2, 0, 7, 0, 2, 1, 7, 1, 2, 2, 7, 2, 2, 3, 7, 3, 2,
		4, 7, 4, 2, 5, 7, 5, 2, 6, 7, 6, 2, 7, 7, 7, 2, 8, 7, 8, 2, 9, 7, 9, 2,
		10, 7, 10, 2, 11, 7, 11, 2, 12, 7, 12, 2, 13, 7, 13, 2, 14, 7, 14, 2, 15,
		7, 15, 2, 16, 7, 16, 2, 17, 7, 17, 2, 18, 7, 18, 2, 19, 7, 19, 2, 20, 7,
		20, 2, 21, 7, 21, 2, 22, 7, 22, 2, 23, 7, 23, 2, 24, 7, 24, 2, 25, 7, 25,
		2, 26, 7, 26, 2, 27, 7, 27, 2, 28, 7, 28, 2, 29, 7, 29, 2, 30, 7, 30, 2,
		31, 7, 31, 2, 32, 7, 32, 2, 33, 7, 33, 2, 34, 7, 34, 2, 35, 7, 35, 2, 36,
		7, 36, 2, 37, 7, 37, 2, 38, 7, 38, 2, 39, 7, 39, 2, 40, 7, 40, 2, 41, 7,
		41, 2, 42, 7, 42, 2, 43, 7, 43, 2, 44, 7, 44, 2, 45, 7, 45, 2, 46, 7, 46,
		2, 47, 7, 47, 2, 48, 7, 48, 2, 49, 7, 49, 2, 50, 7, 50, 2, 51, 7, 51, 2,
		52, 7, 52, 2, 53, 7, 53, 2, 54, 7, 54, 2, 55, 7, 55, 2, 56, 7, 56, 2, 57,
		7, 57, 2, 58, 7, 58, 2, 59, 7, 59, 2, 60, 7, 60, 2, 61, 7, 61, 2, 62, 7,
		62, 2, 63, 7, 63, 2, 64, 7, 64, 2, 65, 7, 65, 2, 66, 7, 66, 2, 67, 7, 67,
		2, 68, 7, 68, 2, 69, 7, 69, 2, 70, 7, 70, 2, 71, 7, 71, 2, 72, 7, 72, 2,
		73, 7, 73, 2, 74, 7, 74, 2, 75, 7, 75, 2, 76, 7, 76, 1, 0, 1, 0, 1, 1,
		1, 1, 1, 2, 1, 2, 1, 3, 1, 3, 1, 4, 1, 4, 1, 5, 1, 5, 1, 6, 1, 6, 1, 7,
		1, 7, 1, 7, 1, 8, 1, 8, 1, 9, 1, 9, 1, 10, 1, 10, 1, 10, 1, 11, 1, 11,
		1, 11, 1, 12, 1, 12, 1, 13, 1, 13, 1, 14, 1, 14, 1, 15, 1, 15, 1, 15, 1,
		16, 1, 16, 1, 17, 1, 17, 1, 17, 1, 18, 1, 18, 1, 19, 1, 19, 1, 19, 1, 20,
		1, 20, 1, 20, 1, 21, 1, 21, 1, 21, 1, 22, 1, 22, 1, 22, 1, 22, 1, 23, 1,
		23, 1, 23, 1, 23, 1, 24, 1, 24, 1, 24, 1, 24, 1, 25, 1, 25, 1, 25, 1, 25,
		1, 25, 1, 26, 1, 26, 1, 26, 1, 26, 1, 26, 1, 26, 1, 26, 1, 26, 1, 26, 1,
		27, 1, 27, 1, 27, 1, 27, 1, 27, 1, 27, 1, 28, 1, 28, 1, 28, 1, 28, 1, 28,
		1, 29, 1, 29, 1, 29, 1, 29, 1, 29, 1, 29, 1, 30, 1, 30, 1, 30, 1, 30, 1,
		30, 1, 31, 1, 31, 1, 31, 1, 32, 1, 32, 1, 32, 1, 32, 1, 32, 1, 32, 1, 33,
		1, 33, 1, 33, 1, 33, 1, 33, 1, 33, 1, 33, 1, 34, 1, 34, 1, 34, 1, 34, 1,
		34, 1, 35, 1, 35, 1, 35, 1, 35, 1, 35, 1, 35, 1, 36, 1, 36, 1, 36, 1, 37,
		1, 37, 1, 38, 1, 38, 1, 38, 1, 38, 1, 38, 1, 39, 1, 39, 1, 39, 1, 39, 1,
		39, 1, 39, 1, 39, 1, 40, 4, 40, 301, 8, 40, 11, 40, 12, 40, 302, 1, 40,
		1, 40, 5, 40, 307, 8, 40, 10, 40, 12, 40, 310, 9, 40, 3, 40, 312, 8, 40,
		1, 40, 1, 40, 3, 40, 316, 8, 40, 1, 40, 4, 40, 319, 8, 40, 11, 40, 12,
		40, 320, 3, 40, 323, 8, 40, 1, 40, 1, 40, 4, 40, 327, 8, 40, 11, 40, 12,
		40, 328, 1, 40, 1, 40, 3, 40, 333, 8, 40, 1, 40, 4, 40, 336, 8, 40, 11,
		40, 12, 40, 337, 3, 40, 340, 8, 40, 3, 40, 342, 8, 40, 1, 41, 1, 41, 1,
		41, 1, 41, 5, 41, 348, 8, 41, 10, 41, 12, 41, 351, 9, 41, 1, 41, 1, 41,
		1, 42, 1, 42, 1, 42, 1, 43, 1, 43, 1, 43, 1, 43, 5, 43, 362, 8, 43, 10,
		43, 12, 43, 365, 9, 43, 1, 43, 1, 43, 1, 44, 1, 44, 1, 44, 1, 44, 5, 44,
		373, 8, 44, 10, 44, 12, 44, 376, 9, 44, 1, 44, 1, 44, 1, 44, 3, 44, 381,
		8, 44, 1, 44, 1, 44, 1, 45, 1, 45, 1, 45, 1, 45, 1, 46, 1, 46, 1, 47, 1,
		47, 1, 47, 5, 47, 394, 8, 47, 10, 47, 12, 47, 397, 9, 47, 1, 48, 1, 48,
		5, 48, 401, 8, 48, 10, 48, 12, 48, 404, 9, 48, 1, 49, 1, 49, 1, 50, 1,
		50, 1, 51, 1, 51, 1, 52, 1, 52, 1, 53, 1, 53, 1, 54, 1, 54, 1, 55, 1, 55,
		1, 56, 1, 56, 1, 57, 1, 57, 1, 58, 1, 58, 1, 59, 1, 59, 1, 60, 1, 60, 1,
		61, 1, 61, 1, 62, 1, 62, 1, 63, 1, 63, 1, 64, 1, 64, 1, 65, 1, 65, 1, 66,
		1, 66, 1, 67, 1, 67, 1, 68, 1, 68, 1, 69, 1, 69, 1, 70, 1, 70, 1, 71, 1,
		71, 1, 72, 1, 72, 1, 73, 1, 73, 1, 74, 1, 74, 1, 75, 1, 75, 1, 76, 1, 76,
		1, 374, 0, 77, 1, 1, 3, 2, 5, 3, 7, 4, 9, 5, 11, 6, 13, 7, 15, 8, 17, 9,
		19, 10, 21, 11, 23, 12, 25, 13, 27, 14, 29, 15, 31, 16, 33, 17, 35, 18,
		37, 19, 39, 20, 41, 21, 43, 22, 45, 23, 47, 24, 49, 25, 51, 26, 53, 27,
		55, 28, 57, 29, 59, 30, 61, 31, 63, 32, 65, 33, 67, 34, 69, 35, 71, 36,
		73, 37, 75, 38, 77, 39, 79, 40, 81, 41, 83, 42, 85, 43, 87, 44, 89, 45,
		91, 46, 93, 0, 95, 47, 97, 48, 99, 0, 101, 0, 103, 0, 105, 0, 107, 0, 109,
		0, 111, 0, 113, 0, 115, 0, 117, 0, 119, 0, 121, 0, 123, 0, 125, 0, 127,
		0, 129, 0, 131, 0, 133, 0, 135, 0, 137, 0, 139, 0, 141, 0, 143, 0, 145,
		0, 147, 0, 149, 0, 151, 0, 153, 49, 1, 0, 35, 2, 0, 43, 43, 45, 45, 1,
		0, 39, 39, 2, 0, 10, 10, 13, 13, 3, 0, 9, 11, 13, 13, 32, 32, 1, 0, 48,
		57, 5, 0, 40, 41, 91, 91, 93, 93, 123, 123, 125, 125, 2, 0, 65, 90, 97,
		122, 4, 0, 48, 57, 65, 90, 95, 95, 97, 122, 9, 0, 33, 33, 35, 38, 42, 43,
		45, 58, 60, 90, 94, 95, 97, 122, 124, 124, 126, 126, 2, 0, 65, 65, 97,
		97, 2, 0, 66, 66, 98, 98, 2, 0, 67, 67, 99, 99, 2, 0, 68, 68, 100, 100,
		2, 0, 69, 69, 101, 101, 2, 0, 70, 70, 102, 102, 2, 0, 71, 71, 103, 103,
		2, 0, 72, 72, 104, 104, 2, 0, 73, 73, 105, 105, 2, 0, 74, 74, 106, 106,
		2, 0, 75, 75, 107, 107, 2, 0, 76, 76, 108, 108, 2, 0, 77, 77, 109, 109,
		2, 0, 78, 78, 110, 110, 2, 0, 79, 79, 111, 111, 2, 0, 80, 80, 112, 112,
		2, 0, 81, 81, 113, 113, 2, 0, 82, 82, 114, 114, 2, 0, 83, 83, 115, 115,
		2, 0, 84, 84, 116, 116, 2, 0, 85, 85, 117, 117, 2, 0, 86, 86, 118, 118,
		2, 0, 87, 87, 119, 119, 2, 0, 88, 88, 120, 120, 2, 0, 89, 89, 121, 121,
		2, 0, 90, 90, 122, 122, 451, 0, 1, 1, 0, 0, 0, 0, 3, 1, 0, 0, 0, 0, 5,
		1, 0, 0, 0, 0, 7, 1, 0, 0, 0, 0, 9, 1, 0, 0, 0, 0, 11, 1, 0, 0, 0, 0, 13,
		1, 0, 0, 0, 0, 15, 1, 0, 0, 0, 0, 17, 1, 0, 0, 0, 0, 19, 1, 0, 0, 0, 0,
		21, 1, 0, 0, 0, 0, 23, 1, 0, 0, 0, 0, 25, 1, 0, 0, 0, 0, 27, 1, 0, 0, 0,
		0, 29, 1, 0, 0, 0, 0, 31, 1, 0, 0, 0, 0, 33, 1, 0, 0, 0, 0, 35, 1, 0, 0,
		0, 0, 37, 1, 0, 0, 0, 0, 39, 1, 0, 0, 0, 0, 41, 1, 0, 0, 0, 0, 43, 1, 0,
		0, 0, 0, 45, 1, 0, 0, 0, 0, 47, 1, 0, 0, 0, 0, 49, 1, 0, 0, 0, 0, 51, 1,
		0, 0, 0, 0, 53, 1, 0, 0, 0, 0, 55, 1, 0, 0, 0, 0, 57, 1, 0, 0, 0, 0, 59,
		1, 0, 0, 0, 0, 61, 1, 0, 0, 0, 0, 63, 1, 0, 0, 0, 0, 65, 1, 0, 0, 0, 0,
		67, 1, 0, 0, 0, 0, 69, 1, 0, 0, 0, 0, 71, 1, 0, 0, 0, 0, 73, 1, 0, 0, 0,
		0, 75, 1, 0, 0, 0, 0, 77, 1, 0, 0, 0, 0, 79, 1, 0, 0, 0, 0, 81, 1, 0, 0,
		0, 0, 83, 1, 0, 0, 0, 0, 85, 1, 0, 0, 0, 0, 87, 1, 0, 0, 0, 0, 89, 1, 0,
		0, 0, 0, 91, 1, 0, 0, 0, 0, 95, 1, 0, 0, 0, 0, 97, 1, 0, 0, 0, 0, 153,
		1, 0, 0, 0, 1, 155, 1, 0, 0, 0, 3, 157, 1, 0, 0, 0, 5, 159, 1, 0, 0, 0,
		7, 161, 1, 0, 0, 0, 9, 163, 1, 0, 0, 0, 11, 165, 1, 0, 0, 0, 13, 167, 1,
		0, 0, 0, 15, 169, 1, 0, 0, 0, 17, 172, 1, 0, 0, 0, 19, 174, 1, 0, 0, 0,
		21, 176, 1, 0, 0, 0, 23, 179, 1, 0, 0, 0, 25, 182, 1, 0, 0, 0, 27, 184,
		1, 0, 0, 0, 29, 186, 1, 0, 0, 0, 31, 188, 1, 0, 0, 0, 33, 191, 1, 0, 0,
		0, 35, 193, 1, 0, 0, 0, 37, 196, 1, 0, 0, 0, 39, 198, 1, 0, 0, 0, 41, 201,
		1, 0, 0, 0, 43, 204, 1, 0, 0, 0, 45, 207, 1, 0, 0, 0, 47, 211, 1, 0, 0,
		0, 49, 215, 1, 0, 0, 0, 51, 219, 1, 0, 0, 0, 53, 224, 1, 0, 0, 0, 55, 233,
		1, 0, 0, 0, 57, 239, 1, 0, 0, 0, 59, 244, 1, 0, 0, 0, 61, 250, 1, 0, 0,
		0, 63, 255, 1, 0, 0, 0, 65, 258, 1, 0, 0, 0, 67, 264, 1, 0, 0, 0, 69, 271,
		1, 0, 0, 0, 71, 276, 1, 0, 0, 0, 73, 282, 1, 0, 0, 0, 75, 285, 1, 0, 0,
		0, 77, 287, 1, 0, 0, 0, 79, 292, 1, 0, 0, 0, 81, 341, 1, 0, 0, 0, 83, 343,
		1, 0, 0, 0, 85, 354, 1, 0, 0, 0, 87, 357, 1, 0, 0, 0, 89, 368, 1, 0, 0,
		0, 91, 384, 1, 0, 0, 0, 93, 388, 1, 0, 0, 0, 95, 390, 1, 0, 0, 0, 97, 398,
		1, 0, 0, 0, 99, 405, 1, 0, 0, 0, 101, 407, 1, 0, 0, 0, 103, 409, 1, 0,
		0, 0, 105, 411, 1, 0, 0, 0, 107, 413, 1, 0, 0, 0, 109, 415, 1, 0, 0, 0,
		111, 417, 1, 0, 0, 0, 113, 419, 1, 0, 0, 0, 115, 421, 1, 0, 0, 0, 117,
		423, 1, 0, 0, 0, 119, 425, 1, 0, 0, 0, 121, 427, 1, 0, 0, 0, 123, 429,
		1, 0, 0, 0, 125, 431, 1, 0, 0, 0, 127, 433, 1, 0, 0, 0, 129, 435, 1, 0,
		0, 0, 131, 437, 1, 0, 0, 0, 133, 439, 1, 0, 0, 0, 135, 441, 1, 0, 0, 0,
		137, 443, 1, 0, 0, 0, 139, 445, 1, 0, 0, 0, 141, 447, 1, 0, 0, 0, 143,
		449, 1, 0, 0, 0, 145, 451, 1, 0, 0, 0, 147, 453, 1, 0, 0, 0, 149, 455,
		1, 0, 0, 0, 151, 457, 1, 0, 0, 0, 153, 459, 1, 0, 0, 0, 155, 156, 5, 59,
		0, 0, 156, 2, 1, 0, 0, 0, 157, 158, 5, 44, 0, 0, 158, 4, 1, 0, 0, 0, 159,
		160, 5, 40, 0, 0, 160, 6, 1, 0, 0, 0, 161, 162, 5, 41, 0, 0, 162, 8, 1,
		0, 0, 0, 163, 164, 5, 46, 0, 0, 164, 10, 1, 0, 0, 0, 165, 166, 5, 45, 0,
		0, 166, 12, 1, 0, 0, 0, 167, 168, 5, 43, 0, 0, 168, 14, 1, 0, 0, 0, 169,
		170, 5, 124, 0, 0, 170, 171, 5, 124, 0, 0, 171, 16, 1, 0, 0, 0, 172, 173,
		5, 47, 0, 0, 173, 18, 1, 0, 0, 0, 174, 175, 5, 37, 0, 0, 175, 20, 1, 0,
		0, 0, 176, 177, 5, 60, 0, 0, 177, 178, 5, 60, 0, 0, 178, 22, 1, 0, 0, 0,
		179, 180, 5, 62, 0, 0, 180, 181, 5, 62, 0, 0, 181, 24, 1, 0, 0, 0, 182,
		183, 5, 38, 0, 0, 183, 26, 1, 0, 0, 0, 184, 185, 5, 124, 0, 0, 185, 28,
		1, 0, 0, 0, 186, 187, 5, 60, 0, 0, 187, 30, 1, 0, 0, 0, 188, 189, 5, 60,
		0, 0, 189, 190, 5, 61, 0, 0, 190, 32, 1, 0, 0, 0, 191, 192, 5, 62, 0, 0,
		192, 34, 1, 0, 0, 0, 193, 194, 5, 62, 0, 0, 194, 195, 5, 61, 0, 0, 195,
		36, 1, 0, 0, 0, 196, 197, 5, 61, 0, 0, 197, 38, 1, 0, 0, 0, 198, 199, 5,
		61, 0, 0, 199, 200, 5, 61, 0, 0, 200, 40, 1, 0, 0, 0, 201, 202, 5, 33,
		0, 0, 202, 203, 5, 61, 0, 0, 203, 42, 1, 0, 0, 0, 204, 205, 5, 60, 0, 0,
		205, 206, 5, 62, 0, 0, 206, 44, 1, 0, 0, 0, 207, 208, 3, 101, 50, 0, 208,
		209, 3, 123, 61, 0, 209, 210, 3, 123, 61, 0, 210, 46, 1, 0, 0, 0, 211,
		212, 3, 101, 50, 0, 212, 213, 3, 127, 63, 0, 213, 214, 3, 107, 53, 0, 214,
		48, 1, 0, 0, 0, 215, 216, 3, 101, 50, 0, 216, 217, 3, 137, 68, 0, 217,
		218, 3, 105, 52, 0, 218, 50, 1, 0, 0, 0, 219, 220, 3, 107, 53, 0, 220,
		221, 3, 109, 54, 0, 221, 222, 3, 137, 68, 0, 222, 223, 3, 105, 52, 0, 223,
		52, 1, 0, 0, 0, 224, 225, 3, 107, 53, 0, 225, 226, 3, 117, 58, 0, 226,
		227, 3, 137, 68, 0, 227, 228, 3, 139, 69, 0, 228, 229, 3, 117, 58, 0, 229,
		230, 3, 127, 63, 0, 230, 231, 3, 105, 52, 0, 231, 232, 3, 139, 69, 0, 232,
		54, 1, 0, 0, 0, 233, 234, 3, 111, 55, 0, 234, 235, 3, 101, 50, 0, 235,
		236, 3, 123, 61, 0, 236, 237, 3, 137, 68, 0, 237, 238, 3, 109, 54, 0, 238,
		56, 1, 0, 0, 0, 239, 240, 3, 111, 55, 0, 240, 241, 3, 135, 67, 0, 241,
		242, 3, 129, 64, 0, 242, 243, 3, 125, 62, 0, 243, 58, 1, 0, 0, 0, 244,
		245, 3, 123, 61, 0, 245, 246, 3, 117, 58, 0, 246, 247, 3, 125, 62, 0, 247,
		248, 3, 117, 58, 0, 248, 249, 3, 139, 69, 0, 249, 60, 1, 0, 0, 0, 250,
		251, 3, 127, 63, 0, 251, 252, 3, 141, 70, 0, 252, 253, 3, 123, 61, 0, 253,
		254, 3, 123, 61, 0, 254, 62, 1, 0, 0, 0, 255, 256, 3, 129, 64, 0, 256,
		257, 3, 135, 67, 0, 257, 64, 1, 0, 0, 0, 258, 259, 3, 129, 64, 0, 259,
		260, 3, 135, 67, 0, 260, 261, 3, 107, 53, 0, 261, 262, 3, 109, 54, 0, 262,
		263, 3, 135, 67, 0, 263, 66, 1, 0, 0, 0, 264, 265, 3, 137, 68, 0, 265,
		266, 3, 109, 54, 0, 266, 267, 3, 123, 61, 0, 267, 268, 3, 109, 54, 0, 268,
		269, 3, 105, 52, 0, 269, 270, 3, 139, 69, 0, 270, 68, 1, 0, 0, 0, 271,
		272, 3, 139, 69, 0, 272, 273, 3, 135, 67, 0, 273, 274, 3, 141, 70, 0, 274,
		275, 3, 109, 54, 0, 275, 70, 1, 0, 0, 0, 276, 277, 3, 145, 72, 0, 277,
		278, 3, 115, 57, 0, 278, 279, 3, 109, 54, 0, 279, 280, 3, 135, 67, 0, 280,
		281, 3, 109, 54, 0, 281, 72, 1, 0, 0, 0, 282, 283, 3, 103, 51, 0, 283,
		284, 3, 149, 74, 0, 284, 74, 1, 0, 0, 0, 285, 286, 5, 42, 0, 0, 286, 76,
		1, 0, 0, 0, 287, 288, 5, 36, 0, 0, 288, 289, 5, 107, 0, 0, 289, 290, 5,
		101, 0, 0, 290, 291, 5, 121, 0, 0, 291, 78, 1, 0, 0, 0, 292, 293, 5, 36,
		0, 0, 293, 294, 5, 118, 0, 0, 294, 295, 5, 97, 0, 0, 295, 296, 5, 108,
		0, 0, 296, 297, 5, 117, 0, 0, 297, 298, 5, 101, 0, 0, 298, 80, 1, 0, 0,
		0, 299, 301, 3, 93, 46, 0, 300, 299, 1, 0, 0, 0, 301, 302, 1, 0, 0, 0,
		302, 300, 1, 0, 0, 0, 302, 303, 1, 0, 0, 0, 303, 311, 1, 0, 0, 0, 304,
		308, 5, 46, 0, 0, 305, 307, 3, 93, 46, 0, 306, 305, 1, 0, 0, 0, 307, 310,
		1, 0, 0, 0, 308, 306, 1, 0, 0, 0, 308, 309, 1, 0, 0, 0, 309, 312, 1, 0,
		0, 0, 310, 308, 1, 0, 0, 0, 311, 304, 1, 0, 0, 0, 311, 312, 1, 0, 0, 0,
		312, 322, 1, 0, 0, 0, 313, 315, 3, 109, 54, 0, 314, 316, 7, 0, 0, 0, 315,
		314, 1, 0, 0, 0, 315, 316, 1, 0, 0, 0, 316, 318, 1, 0, 0, 0, 317, 319,
		3, 93, 46, 0, 318, 317, 1, 0, 0, 0, 319, 320, 1, 0, 0, 0, 320, 318, 1,
		0, 0, 0, 320, 321, 1, 0, 0, 0, 321, 323, 1, 0, 0, 0, 322, 313, 1, 0, 0,
		0, 322, 323, 1, 0, 0, 0, 323, 342, 1, 0, 0, 0, 324, 326, 5, 46, 0, 0, 325,
		327, 3, 93, 46, 0, 326, 325, 1, 0, 0, 0, 327, 328, 1, 0, 0, 0, 328, 326,
		1, 0, 0, 0, 328, 329, 1, 0, 0, 0, 329, 339, 1, 0, 0, 0, 330, 332, 3, 109,
		54, 0, 331, 333, 7, 0, 0, 0, 332, 331, 1, 0, 0, 0, 332, 333, 1, 0, 0, 0,
		333, 335, 1, 0, 0, 0, 334, 336, 3, 93, 46, 0, 335, 334, 1, 0, 0, 0, 336,
		337, 1, 0, 0, 0, 337, 335, 1, 0, 0, 0, 337, 338, 1, 0, 0, 0, 338, 340,
		1, 0, 0, 0, 339, 330, 1, 0, 0, 0, 339, 340, 1, 0, 0, 0, 340, 342, 1, 0,
		0, 0, 341, 300, 1, 0, 0, 0, 341, 324, 1, 0, 0, 0, 342, 82, 1, 0, 0, 0,
		343, 349, 5, 39, 0, 0, 344, 348, 8, 1, 0, 0, 345, 346, 5, 39, 0, 0, 346,
		348, 5, 39, 0, 0, 347, 344, 1, 0, 0, 0, 347, 345, 1, 0, 0, 0, 348, 351,
		1, 0, 0, 0, 349, 347, 1, 0, 0, 0, 349, 350, 1, 0, 0, 0, 350, 352, 1, 0,
		0, 0, 351, 349, 1, 0, 0, 0, 352, 353, 5, 39, 0, 0, 353, 84, 1, 0, 0, 0,
		354, 355, 3, 147, 73, 0, 355, 356, 3, 83, 41, 0, 356, 86, 1, 0, 0, 0, 357,
		358, 5, 45, 0, 0, 358, 359, 5, 45, 0, 0, 359, 363, 1, 0, 0, 0, 360, 362,
		8, 2, 0, 0, 361, 360, 1, 0, 0, 0, 362, 365, 1, 0, 0, 0, 363, 361, 1, 0,
		0, 0, 363, 364, 1, 0, 0, 0, 364, 366, 1, 0, 0, 0, 365, 363, 1, 0, 0, 0,
		366, 367, 6, 43, 0, 0, 367, 88, 1, 0, 0, 0, 368, 369, 5, 47, 0, 0, 369,
		370, 5, 42, 0, 0, 370, 374, 1, 0, 0, 0, 371, 373, 9, 0, 0, 0, 372, 371,
		1, 0, 0, 0, 373, 376, 1, 0, 0, 0, 374, 375, 1, 0, 0, 0, 374, 372, 1, 0,
		0, 0, 375, 380, 1, 0, 0, 0, 376, 374, 1, 0, 0, 0, 377, 378, 5, 42, 0, 0,
		378, 381, 5, 47, 0, 0, 379, 381, 5, 0, 0, 1, 380, 377, 1, 0, 0, 0, 380,
		379, 1, 0, 0, 0, 381, 382, 1, 0, 0, 0, 382, 383, 6, 44, 0, 0, 383, 90,
		1, 0, 0, 0, 384, 385, 7, 3, 0, 0, 385, 386, 1, 0, 0, 0, 386, 387, 6, 45,
		0, 0, 387, 92, 1, 0, 0, 0, 388, 389, 7, 4, 0, 0, 389, 94, 1, 0, 0, 0, 390,
		395, 3, 99, 49, 0, 391, 394, 3, 99, 49, 0, 392, 394, 7, 5, 0, 0, 393, 391,
		1, 0, 0, 0, 393, 392, 1, 0, 0, 0, 394, 397, 1, 0, 0, 0, 395, 393, 1, 0,
		0, 0, 395, 396, 1, 0, 0, 0, 396, 96, 1, 0, 0, 0, 397, 395, 1, 0, 0, 0,
		398, 402, 7, 6, 0, 0, 399, 401, 7, 7, 0, 0, 400, 399, 1, 0, 0, 0, 401,
		404, 1, 0, 0, 0, 402, 400, 1, 0, 0, 0, 402, 403, 1, 0, 0, 0, 403, 98, 1,
		0, 0, 0, 404, 402, 1, 0, 0, 0, 405, 406, 7, 8, 0, 0, 406, 100, 1, 0, 0,
		0, 407, 408, 7, 9, 0, 0, 408, 102, 1, 0, 0, 0, 409, 410, 7, 10, 0, 0, 410,
		104, 1, 0, 0, 0, 411, 412, 7, 11, 0, 0, 412, 106, 1, 0, 0, 0, 413, 414,
		7, 12, 0, 0, 414, 108, 1, 0, 0, 0, 415, 416, 7, 13, 0, 0, 416, 110, 1,
		0, 0, 0, 417, 418, 7, 14, 0, 0, 418, 112, 1, 0, 0, 0, 419, 420, 7, 15,
		0, 0, 420, 114, 1, 0, 0, 0, 421, 422, 7, 16, 0, 0, 422, 116, 1, 0, 0, 0,
		423, 424, 7, 17, 0, 0, 424, 118, 1, 0, 0, 0, 425, 426, 7, 18, 0, 0, 426,
		120, 1, 0, 0, 0, 427, 428, 7, 19, 0, 0, 428, 122, 1, 0, 0, 0, 429, 430,
		7, 20, 0, 0, 430, 124, 1, 0, 0, 0, 431, 432, 7, 21, 0, 0, 432, 126, 1,
		0, 0, 0, 433, 434, 7, 22, 0, 0, 434, 128, 1, 0, 0, 0, 435, 436, 7, 23,
		0, 0, 436, 130, 1, 0, 0, 0, 437, 438, 7, 24, 0, 0, 438, 132, 1, 0, 0, 0,
		439, 440, 7, 25, 0, 0, 440, 134, 1, 0, 0, 0, 441, 442, 7, 26, 0, 0, 442,
		136, 1, 0, 0, 0, 443, 444, 7, 27, 0, 0, 444, 138, 1, 0, 0, 0, 445, 446,
		7, 28, 0, 0, 446, 140, 1, 0, 0, 0, 447, 448, 7, 29, 0, 0, 448, 142, 1,
		0, 0, 0, 449, 450, 7, 30, 0, 0, 450, 144, 1, 0, 0, 0, 451, 452, 7, 31,
		0, 0, 452, 146, 1, 0, 0, 0, 453, 454, 7, 32, 0, 0, 454, 148, 1, 0, 0, 0,
		455, 456, 7, 33, 0, 0, 456, 150, 1, 0, 0, 0, 457, 458, 7, 34, 0, 0, 458,
		152, 1, 0, 0, 0, 459, 460, 9, 0, 0, 0, 460, 154, 1, 0, 0, 0, 20, 0, 302,
		308, 311, 315, 320, 322, 328, 332, 337, 339, 341, 347, 349, 363, 374, 380,
		393, 395, 402, 1, 0, 1, 0,
	}
	deserializer := antlr.NewATNDeserializer(nil)
	staticData.atn = deserializer.Deserialize(staticData.serializedATN)
	atn := staticData.atn
	staticData.decisionToDFA = make([]*antlr.DFA, len(atn.DecisionToState))
	decisionToDFA := staticData.decisionToDFA
	for index, state := range atn.DecisionToState {
		decisionToDFA[index] = antlr.NewDFA(state, index)
	}
}

// DSQLLexerInit initializes any static state used to implement DSQLLexer. By default the
// static state used to implement the lexer is lazily initialized during the first call to
// NewDSQLLexer(). You can call this function if you wish to initialize the static state ahead
// of time.
func DSQLLexerInit() {
	staticData := &DSQLLexerLexerStaticData
	staticData.once.Do(dsqllexerLexerInit)
}

// NewDSQLLexer produces a new lexer instance for the optional input antlr.CharStream.
func NewDSQLLexer(input antlr.CharStream) *DSQLLexer {
	DSQLLexerInit()
	l := new(DSQLLexer)
	l.BaseLexer = antlr.NewBaseLexer(input)
	staticData := &DSQLLexerLexerStaticData
	l.Interpreter = antlr.NewLexerATNSimulator(l, staticData.atn, staticData.decisionToDFA, staticData.PredictionContextCache)
	l.channelNames = staticData.ChannelNames
	l.modeNames = staticData.ModeNames
	l.RuleNames = staticData.RuleNames
	l.LiteralNames = staticData.LiteralNames
	l.SymbolicNames = staticData.SymbolicNames
	l.GrammarFileName = "DSQL.g4"
	// TODO: l.EOF = antlr.TokenEOF

	return l
}

// DSQLLexer tokens.
const (
	DSQLLexerT__0                = 1
	DSQLLexerT__1                = 2
	DSQLLexerT__2                = 3
	DSQLLexerT__3                = 4
	DSQLLexerT__4                = 5
	DSQLLexerT__5                = 6
	DSQLLexerT__6                = 7
	DSQLLexerT__7                = 8
	DSQLLexerT__8                = 9
	DSQLLexerT__9                = 10
	DSQLLexerT__10               = 11
	DSQLLexerT__11               = 12
	DSQLLexerT__12               = 13
	DSQLLexerT__13               = 14
	DSQLLexerT__14               = 15
	DSQLLexerT__15               = 16
	DSQLLexerT__16               = 17
	DSQLLexerT__17               = 18
	DSQLLexerT__18               = 19
	DSQLLexerT__19               = 20
	DSQLLexerT__20               = 21
	DSQLLexerT__21               = 22
	DSQLLexerK_ALL               = 23
	DSQLLexerK_AND               = 24
	DSQLLexerK_ASC               = 25
	DSQLLexerK_DESC              = 26
	DSQLLexerK_DISTINCT          = 27
	DSQLLexerK_FALSE             = 28
	DSQLLexerK_FROM              = 29
	DSQLLexerK_LIMIT             = 30
	DSQLLexerK_NULL              = 31
	DSQLLexerK_OR                = 32
	DSQLLexerK_ORDER             = 33
	DSQLLexerK_SELECT            = 34
	DSQLLexerK_TRUE              = 35
	DSQLLexerK_WHERE             = 36
	DSQLLexerK_BY                = 37
	DSQLLexerSTAR                = 38
	DSQLLexerKEY                 = 39
	DSQLLexerVALUE               = 40
	DSQLLexerNUMERIC_LITERAL     = 41
	DSQLLexerSTRING_LITERAL      = 42
	DSQLLexerBLOB_LITERAL        = 43
	DSQLLexerSINGLE_LINE_COMMENT = 44
	DSQLLexerMULTILINE_COMMENT   = 45
	DSQLLexerSPACES              = 46
	DSQLLexerIDENTIFIER          = 47
	DSQLLexerSIMPLE_IDENTIFIER   = 48
	DSQLLexerUNEXPECTED_CHAR     = 49
)
